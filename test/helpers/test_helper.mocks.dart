// Mocks generated by Mockito 5.3.2 from annotations
// in dvp_technical_test/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:dvp_technical_test/core/failures/failure.dart' as _i5;
import 'package:dvp_technical_test/features/data/datasource/address_local_data_source.dart'
    as _i7;
import 'package:dvp_technical_test/features/data/models/address_model.dart'
    as _i8;
import 'package:dvp_technical_test/features/domain/entities/address_entity.dart'
    as _i6;
import 'package:dvp_technical_test/features/domain/repositories/address_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AddressRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddressRepository extends _i1.Mock implements _i3.AddressRepository {
  MockAddressRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> setAddress(
          _i6.AddressEntity? address) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAddress,
          [address],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #setAddress,
            [address],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
  @override
  _i4.Future<
      _i2
          .Either<_i5.Failure, List<_i6.AddressEntity>?>> getListAddress() =>
      (super.noSuchMethod(
        Invocation.method(
          #getListAddress,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.AddressEntity>?>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.AddressEntity>?>(
          this,
          Invocation.method(
            #getListAddress,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.AddressEntity>?>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> removeAddress(
          _i6.AddressEntity? address) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeAddress,
          [address],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #removeAddress,
            [address],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> saveAddress(
          _i6.AddressEntity? address) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAddress,
          [address],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #saveAddress,
            [address],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}

/// A class which mocks [AddressLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddressLocalDataSource extends _i1.Mock
    implements _i7.AddressLocalDataSource {
  MockAddressLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> setAddress(_i8.AddressModel? user) => (super.noSuchMethod(
        Invocation.method(
          #setAddress,
          [user],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<List<_i8.AddressModel>?> getListAddress() => (super.noSuchMethod(
        Invocation.method(
          #getListAddress,
          [],
        ),
        returnValue: _i4.Future<List<_i8.AddressModel>?>.value(),
      ) as _i4.Future<List<_i8.AddressModel>?>);
  @override
  _i4.Future<bool> removeAddress(_i8.AddressModel? user) => (super.noSuchMethod(
        Invocation.method(
          #removeAddress,
          [user],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<bool> saveAddress(_i8.AddressModel? user) => (super.noSuchMethod(
        Invocation.method(
          #saveAddress,
          [user],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
